# Input Management Design Document

## 1. Introduction

This document details the design of the Input Management module for our game engine, focusing on capturing and processing input from various devices such as keyboards, mice, gamepads, and touchscreens. The module aims to provide a flexible, efficient, and easy-to-use system for developers to handle user input in their games. The design emphasizes modularity, cross-platform support, and integration with other engine components, with the API implemented in Rust for type safety and performance.

## 2. Architecture Overview

The Input Management module is structured into several key components to efficiently capture and process input across different platforms and devices:

- **Input Capture**: Handles the low-level capture of input events from hardware devices.
- **Event Processing**: Transforms raw input events into a more usable form, applying game-specific mappings and configurations.
- **Input Mapping**: Allows developers to define custom mappings of physical inputs to logical game actions.
- **Input State Management**: Maintains the current state of all inputs, providing a snapshot of all input devices at any given time.
- **Integration Points**: Facilitates communication and data flow between the Input Management module and other parts of the game engine.

### 2.1 Core Modules

#### 2.1.1 Input Capture

- **Device Handlers**: Separate handlers for different types of input devices (keyboard, mouse, gamepad, touchscreen) to abstract away platform-specific details.
- **Event Queue**: A central queue that collects all input events for later processing.

#### 2.1.2 Event Processing

- **Event Normalization**: Converts platform-specific events into a standardized format.
- **Debouncing**: Filters out unintended repeated inputs, particularly useful for digital buttons.

#### 2.1.3 Input Mapping

- **Action Mappings**: Associates specific input events with logical game actions (e.g., "Jump", "Fire").
- **Axis Mappings**: Maps continuous input values to game action intensities (e.g., joystick movement to character movement speed).

#### 2.1.4 Input State Management

- **State Snapshot**: Provides a snapshot of the current state of all inputs, which can be queried at any point in the game loop.

## 3. API Overview

The Input Management module exposes a Rust-based API that enables game developers to configure input mappings, process input events, and query the current input state. Key functionalities include:

- **Initialization**: Setup and configuration of the input management system.
- **Input Mapping Configuration**: Methods for defining action and axis mappings.
- **Input Querying**: Functions to query the current state of inputs or check for specific actions.

### 3.1 Example API Functions

```rust
// Initializes the input management system
fn initialize_input_system() -> Result<InputSystem, InputError>;

// Registers a new action mapping
fn register_action_mapping(action: &str, device: InputDevice, key: KeyCode) -> Result<(), InputError>;

// Registers a new axis mapping
fn register_axis_mapping(action: &str, device: InputDevice, axis: AxisCode, scale: f32) -> Result<(), InputError>;

// Checks if a specific action is currently pressed
fn is_action_pressed(action: &str) -> bool;

// Gets the current value of an axis mapping
fn get_axis_value(action: &str) -> f32;

// Updates the input system, processing new input events
fn update_input_system() -> Result<(), InputError>;
```

## 4. Integration with Other Modules

The Input Management module integrates with other core modules of the game engine to ensure seamless input handling across the system:

- **Game World Management**: Translates input actions into game world interactions, controlling characters or triggering events based on user inputs.
- **Scripting Engine**: Exposes input functionalities to the scripting layer, allowing game logic to respond dynamically to player inputs.
- **UI/UX System**: Manages input events for in-game menus, buttons, and interactive elements, providing a responsive user interface.

## 5. Best Practices

- **Platform Abstraction**: Design the input capture system to abstract away platform-specific details, allowing for easy porting of games to different platforms.
- **Customizability**: Offer developers comprehensive tools for customizing input mappings and processing, catering to a wide range of games and player preferences.
- **Efficiency**: Optimize the event processing pipeline to minimize latency and ensure responsive game controls.
- **Robustness**: Implement error handling and validation to gracefully manage unsupported devices or malformed input configurations.

## 6. Conclusion

This design document outlines the structure, core components, and API of the Input Management module for our game engine. By adhering to the principles of modularity, cross-platform support, and ease of use, and leveraging Rust's safety and performance, the module will provide a solid foundation for handling user input in a wide variety of games.

---

Requirements:

- As output I want to get separately one Rust source file with complete API interface of this module (structures, traits and methods/functions/interfaces), that this module provides to other modules in Game Engine.

- I want to get submodules of "Input Management" system in separate sub-directories (each sub-module have its own directory). And each implementation part of submodule to be in separate source file. Basically following encapsulation pattern and best practices.

- Meson project building a library
