# Resource Management Module Design Document

## 1. Introduction

This document outlines the design of the Resource Management module for our game engine. This module is responsible for the efficient loading, unloading, and management of game assets such as textures, models, audio, and scripts. Designed with efficiency, scalability, and ease of use in mind, it aims to minimize memory usage and loading times while providing a flexible API in Rust.

## 2. Architecture Overview

The Resource Management module is structured around several key components to handle various aspects of asset management:

- **Asset Loading**: Responsible for asynchronously loading assets from disk or network.
- **Asset Caching**: Temporarily stores assets in memory for quick access, with strategies for cache eviction based on usage patterns.
- **Asset Unloading**: Manages the removal of assets from memory when they are no longer needed.
- **Reference Counting**: Tracks references to assets to ensure they are unloaded only when not in use.
- **Hot Reloading**: Allows for the reloading of assets during runtime without restarting the game, useful for development and debugging.

### 2.1 Core Modules

#### 2.1.1 Asset Loading

- **Asynchronous Loading**: Loads assets in the background, allowing the game to continue running smoothly.
- **Path Resolution**: Translates asset identifiers or paths into actual file system or network locations.

#### 2.1.2 Asset Caching

- **LRU Cache**: Implements a Least Recently Used caching strategy to automatically unload the least accessed assets when memory is low.
- **Preloading**: Allows for the manual specification of assets to be loaded in advance based on game level or scene.

#### 2.1.3 Asset Unloading

- **Manual Unloading**: Provides an API for manually unloading specific assets.
- **Automatic Unloading**: Automatically unloads assets based on reference counting and cache eviction policies.

#### 2.1.4 Reference Counting

- **Smart Pointers**: Utilizes Rust's smart pointers to automatically increment and decrement reference counts.
- **Garbage Collection**: Periodically checks for assets with zero references to free up memory.

#### 2.1.5 Hot Reloading

- **File System Monitoring**: Watches for changes to asset files and automatically reloads them.
- **Version Tracking**: Keeps track of asset versions to ensure consistency across reloads.

## 3. API Overview

The Resource Management module offers a Rust-based API that simplifies the task of asset management. Key functionalities include:

- **Asset Loading and Access**: Functions to load and access assets.
- **Asset Unloading**: Methods to unload assets manually.
- **Resource Tracking**: Utilities for tracking asset references and usage.

## 4. Integration with Other Modules

The Resource Management module is designed to integrate seamlessly with other core modules of the game engine:

- **Rendering Engine**: Supplies textures, models, and shaders for rendering.
- **Audio Engine**: Provides audio clips and music tracks for sound playback.
- **Scripting Engine**: Loads and manages script files for game logic.
- **Networking**: May integrate for downloading assets from remote servers or content delivery networks.

## 5. Best Practices

- **Memory Management**: Implement efficient memory usage strategies, including asset compression and streaming.
- **Concurrency**: Utilize Rust's concurrency features to load and unload assets without blocking the main game loop.
- **Error Handling**: Provide comprehensive error handling to manage issues in asset loading or processing gracefully.
- **Scalability**: Design the module to scale with the number of assets and the complexity of the game.

## 6. Conclusion

This design document presents a detailed overview of the Resource Management module for our game engine. By following the outlined architecture, API design, and integration strategies, and adhering to best practices, the module will enable efficient and flexible management of game assets, enhancing both development and runtime performance.


---

Requirements:

It is Library project

Module API: Fully complete module API of "Resource Management" module  (structures, traits and methods/functions/interfaces) without implementation, that this module provides to other modules in Game Engine. Separatelly from implementation. In one file

Implementation sources: I want to get submodules of "Resource Management" module in separate sub-directories (each sub-module have its own directory). And each implementation part of submodule to be in separate source file. Basically following encapsulation pattern and best practices.

Use Meson as build system