#include <cstdlib>
#include <iostream>
#include <memory>
#include <utility>

/* Comparing assembly code generated by compilers for singleton versus
 * std::unique_ptr */

class RenderManager {
 public:
  // Get the one and only instance.
  static RenderManager& get() {
    // This function-static will be constructed on the
    // first call to this function.
    static RenderManager sSingleton;
    return sSingleton;
  }
  RenderManager() { code = 5; }
  ~RenderManager() {
    // Shut down the manager.
    // ...
  }

  int code;
  int code_a;
};

void DoSomethingWithManager(RenderManager& manager) {
  manager.code = 7;
  manager.code_a = 8;
}

auto DoSomethingWithManager2(std::unique_ptr<RenderManager> manager) {
  manager->code = 7;
  manager->code_a = 8;
  return manager;
}

void DoSomethingWithManager3(RenderManager& manager) {
  manager.code = 7;
  manager.code_a = 8;
}

int main() {
  auto manager = RenderManager::get();
  DoSomethingWithManager(manager);

  auto manager2 = std::make_unique<RenderManager>();
  manager2 = DoSomethingWithManager2(std::move(manager2));
  DoSomethingWithManager3(*manager2);
  std::cout << manager.code << "\n";
  return EXIT_SUCCESS;
}
